const express = require('express');
const multer = require('multer');
const { BlobServiceClient } = require('@azure/storage-blob');
const fs = require('fs');
const sql = require('mssql');
require('dotenv').config();  // To load environment variables from .env file

const app = express();
const port = 3000;

// Set up multer for file upload
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');  // Files are temporarily stored in the 'uploads' folder
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);  // Unique filename to avoid conflicts
  },
});

const upload = multer({ storage: storage });

// SQL Database Configuration from .env file
const sqlConfig = {
  user: process.env.SQL_USER,  // SQL username from .env
  password: process.env.SQL_PASSWORD,  // SQL password from .env
  server: process.env.SQL_SERVER,  // SQL server name from .env
  database: process.env.SQL_DATABASE,  // SQL database name from .env
  options: {
    encrypt: true,
    trustServerCertificate: false,
  },
};

// Function to connect to SQL Database
async function connectToSQL() {
  try {
    await sql.connect(sqlConfig);
    console.log("Connected to SQL Database");
  } catch (err) {
    console.error("SQL Connection Error: ", err);
  }
}

// Function to save file metadata to SQL
async function saveFileMetadata(fileName, fileUrl) {
  try {
    await sql.query(`
      INSERT INTO FileMetadata (fileName, fileUrl, uploadDate)
      VALUES ('${fileName}', '${fileUrl}', GETDATE())
    `);
    console.log("File metadata saved to SQL Database.");
  } catch (err) {
    console.error("Error saving metadata to SQL: ", err);
  }
}

// Function to create container if it doesn't exist
async function createContainerIfNotExists() {
  const blobServiceClient = BlobServiceClient.fromConnectionString(process.env.AZURE_STORAGE_CONNECTION_STRING);
  const containerClient = blobServiceClient.getContainerClient(process.env.AZURE_CONTAINER_NAME);  // Using container name from .env

  try {
    const exists = await containerClient.exists();
    if (!exists) {
      console.log('Container does not exist. Creating container...');
      await containerClient.create();
      console.log('Container created successfully.');
    } else {
      console.log('Container already exists.');
    }
  } catch (error) {
    console.error('Error while creating container:', error);
  }
}

// Function to upload file to Azure Blob Storage
async function uploadFileToBlob(file) {
  try {
    const blobServiceClient = BlobServiceClient.fromConnectionString(process.env.AZURE_STORAGE_CONNECTION_STRING);
    const containerClient = blobServiceClient.getContainerClient(process.env.AZURE_CONTAINER_NAME); // Use container name from .env
    const blockBlobClient = containerClient.getBlockBlobClient(file.filename);  // Use the filename for the blob

    // Upload file to Blob Storage
    const uploadBlobResponse = await blockBlobClient.uploadFile(file.path);
    console.log(`Upload block blob ${file.filename} successfully`, uploadBlobResponse.requestId);

    // Return the URL of the uploaded file
    return blockBlobClient.url;
  } catch (error) {
    console.error('Azure Blob upload error:', error);
    throw new Error('Failed to upload file to Azure Blob Storage');
  }
}

// Middleware to ensure the container exists before upload
createContainerIfNotExists();

// Route to upload files
app.post('/upload', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).send('No file uploaded.');
    }

    // Upload file to Azure Blob Storage
    const fileUrl = await uploadFileToBlob(req.file);

    // Save file metadata to SQL Database
    await saveFileMetadata(req.file.filename, fileUrl);

    // Send response with the file URL
    res.status(200).json({
      message: 'File uploaded successfully!',
      fileUrl: fileUrl,
    });

    // Remove file from local server after upload
    fs.unlinkSync(req.file.path);
  } catch (error) {
    console.error('Error during upload:', error);
    res.status(500).send('Error during file upload.');
  }
});

// Start server
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});

// Connect to SQL Database on server start
connectToSQL();
